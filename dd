/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
Position Find( ElementType X, BinTree BST ){//递归实现
    if(BST==nullptr)
        return nullptr;
    if(BST->val>X)
        Find(X,BST->left );
    else if(BST->val<X)
        Find(X,BST->right);
    else if(BST->val==X)
        return BST;
}
Position Find( ElementType X, BinTree BST ){//非递归实现
    while(BST){
        if(BST->val==X)
            break;
        else if(BST_>val>X)
            BST=BST->left;
        else
            BST=BST->right;
    }
    return BST;
}
Position FindMin( BinTree BST ){//非递归实现
    if(BST)
        while(BST->left)
            BST=BST->left;
    return BST;
}
BinTree Insert( ElementType X, BinTree BST ){
    if(!BST){
        BST=(BinTree)malloc(sizeof(BinTree));
        BST->val=X;
        BST->left=nullptr;
        BST->right=nullptr;
    }else{
        if(X<BST->val)
            BST->left=Insert(X,BST->left);
        else if(X>BST->val)
            BST->right=Insert(X,BST->right);
    }
    return BST;
}
BinTree Delete( ElementType X, BinTree BST ){
    if(BST==nullptr)
        cout<<"元素未找到";
    Position Tmp;
    if(BST->val>X)
       BST->left=Delete(X,BST->left);
    else if(BST->val<X)
        BST->right=Delete(X,BST->right);
    else{
        if(BST->left&&BST->right){
            Tmp=FindMin(BST->right);
            BST->val=Tmp->val;
            BST->right=Delete(BST->val,BST->right);
        }else{
            Tmp=BST;
            if(!BST->left)
                BST=BST->right;
            else if(!BST->right)
                BST=BST->left;
            free(Tmp);
        }
        return BST;
    }
}
