详细说明见http://wiki.jikexueyuan.com/project/easy-learn-algorithm/fast-sort.html
#include <stdio.h>
int a[101],n;//定义全局变量，这两个变量需要在子函数中使用
void quicksort(int left,int right)
{
    int i,j,t,temp;
    if(left>right)
        return;
    
    temp=a[left]; //temp中存的就是基准数
    i=left;
    j=right;
    while(i!=j)
    {
        //顺序很重要，要先从右边开始找
        while(a[j]>=temp && i<j)
            j--;
        //再找右边的
        while(a[i]<=temp && i<j)
            i++;
        //交换两个数在数组中的位置
        if(i<j)
        {
            t=a[i];
            a[i]=a[j];
            a[j]=t;
        }
    }
    //最终将基准数归位
    a[left]=a[i];
    a[i]=temp;
    
    quicksort(left,i-1);//继续处理左边的，这里是一个递归的过程
    quicksort(i+1,right);//继续处理右边的 ，这里是一个递归的过程
}
int main()
{
    int i;
    //读入数据
    scanf("%d",&n);
    for(i=1;i<=n;i++)
        scanf("%d",&a[i]);
    quicksort(1,n); //快速排序调用
    
    //输出排序后的结果
    for(i=1;i<=n;i++)
        printf("%d ",a[i]);
    getchar();getchar();
    return 0;
}



/*分治的写法，与上面的代码相同，只不过两部分分开写*/
#include <stdio.h>
#include <iostream>
using namespace std;
int Partition(int a[],int left,int right)
{
    int i,j,t,temp;
    temp=a[left]; //temp中存的就是基准数
    i=left;
    j=right;
    while(i!=j)
    {
        //顺序很重要，要先从右边开始找
        while(a[j]>=temp && i<j)
            j--;
        //再找右边的
        while(a[i]<=temp && i<j)
            i++;
        //交换两个数在数组中的位置
        if(i<j)
        {
            t=a[i];
            a[i]=a[j];
            a[j]=t;
        }
    }
    //最终将基准数归位
    a[left]=a[i];
    a[i]=temp;
    return i;
}
void quicksort(int a[],int left,int right)
{
    if(left<right)
    {
        int q=Partition(a,left,right);
        quicksort(a,left,q-1);
        quicksort(a,q+1,right);
    }
}
int main()
{
    int a[7]={5,2,3,4,1,6,7};
    quicksort(a,0,6); //快速排序调用
    for(int i=0;i<=6;i++)
        printf("%d ",a[i]);
    cout<<endl;
    return 0;
}

