#include <stdio.h>
#include <stdlib.h>
#include <iostream>
using namespace std;
typedef int ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode{
    ElementType Data;
    BinTree Left;
    BinTree Right;
};

void PreorderTraversal( BinTree BT ); /* 先序遍历，由裁判实现，细节不表 */
void InorderTraversal( BinTree BT );  /* 中序遍历，由裁判实现，细节不表 */

BinTree Insert( BinTree BST, ElementType X );
BinTree Delete( BinTree BST, ElementType X );
Position Find( BinTree BST, ElementType X );
Position FindMin( BinTree BST );
Position FindMax( BinTree BST );

int main()
{
    BinTree BST, MinP, MaxP, Tmp;
    ElementType X;
    int N, i;
    
    BST = NULL;
    scanf("%d", &N);
    for ( i=0; i<N; i++ ) {
        scanf("%d", &X);
        BST = Insert(BST, X);
    }
    printf("Preorder:"); PreorderTraversal(BST); printf("\n");
     printf("Inorder:"); InorderTraversal(BST); printf("\n");
    MinP = FindMin(BST);
    MaxP = FindMax(BST);
    scanf("%d", &N);
    for( i=0; i<N; i++ ) {
        scanf("%d", &X);
        Tmp = Find(BST, X);
        if (Tmp == NULL) printf("%d is not found\n", X);
        else {
            printf("%d is found\n", Tmp->Data);
            if (Tmp==MinP) printf("%d is the smallest key\n", Tmp->Data);
            if (Tmp==MaxP) printf("%d is the largest key\n", Tmp->Data);
        }
    }
    scanf("%d", &N);
    for( i=0; i<N; i++ ) {
        scanf("%d", &X);
        BST = Delete(BST, X);
    }
    printf("Preorder:");PreorderTraversal(BST);cout<<endl;
    printf("Inorder:"); InorderTraversal(BST); printf("\n");
    
    return 0;
}
BinTree Insert( BinTree BST, ElementType X ){
    if(BST==nullptr){
        BST=(BinTree)malloc(sizeof(TNode));
        BST->Data=X;
        BST->Left=nullptr;
        BST->Right=nullptr;
    }else{
        if(BST->Data>X)
            BST->Left=Insert(BST->Left,X);
        else if(BST->Data<X)
            BST->Right=Insert(BST->Right,X);
    }
    return BST;
}
BinTree Delete( BinTree BST, ElementType X ){
        BinTree temp;
        if (BST == NULL)
            printf("Not Found\n");
        else
        {
            if (X < BST->Data)
                BST->Left = Delete(BST->Left, X);
            else if (X > BST->Data)
                BST->Right = Delete(BST->Right, X);
            else
            {
                if (BST->Left && BST->Right)
                {
                    temp = FindMin(BST->Right);
                    BST->Data = temp->Data;
                    BST->Right = Delete(BST->Right, temp->Data);
                }
                else
                {
                    temp = BST;
                    if (BST->Left == NULL)
                        BST = BST->Right;
                    else if (BST->Right == NULL)
                        BST = BST->Left;
                    free(temp);
                }
            }
        }
        return BST;
}
Position Find( BinTree BST, ElementType X ){
    if(BST==nullptr)
        return BST;
    while(BST){
        if(BST->Data==X)
            break;
        else if(BST->Data>X)
            BST=BST->Left;
        else
            BST=BST->Right;
    }
    return BST;
}
Position FindMin( BinTree BST ){
    if(BST){
        while(BST->Left)
            BST=BST->Left;
    }
    return BST;
}
Position FindMax( BinTree BST ){
    if(BST){
        while(BST->Right)
            BST=BST->Right;
    }
    return BST;
}
void PreorderTraversal( BinTree BT ){
    if(BT){
        cout<<BT->Data<<" ";
        PreorderTraversal(BT->Left);
        PreorderTraversal(BT->Right);
    }
}
void InorderTraversal( BinTree BT ){
    if(BT){
        InorderTraversal(BT->Left);
        cout<<BT->Data<<" ";
        InorderTraversal(BT->Right);
    }
}
