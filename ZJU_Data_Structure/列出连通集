#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>
#include <queue>
#define MaxVertexNum 100
typedef int WeightType;
typedef int Vertex;
using namespace std;
struct GNode{
    int Nv;
    int Ne;
    WeightType G[MaxVertexNum][MaxVertexNum];
};
typedef GNode* MGraph;
struct ENode{
    Vertex V1;
    Vertex V2;
};
typedef ENode* Edge;
bool Visited[MaxVertexNum]={false};

MGraph BuildGraph();
MGraph CreateGraph(int N);
void Insert(MGraph Graph,Edge Etemp);
void ListComponentsWithDFS(MGraph Graph);
void DFS(Vertex V,MGraph Graph);
void InitVisit();
void ListComponentsWithBFS(MGraph Graph);
void BFS(Vertex V,MGraph Graph);
int main(){
    MGraph Graph;
    Graph=BuildGraph();
    ListComponentsWithDFS(Graph);
    InitVisit();
    ListComponentsWithBFS(Graph);
    return 0;
}
MGraph BuildGraph(){
    int N,E,i;
    Edge Etemp;
    cout<<"输入图的顶点的个数和边的个数:"<<endl;
    cin>>N>>E;
    MGraph Graph;
    Graph=CreateGraph(N);
    cout<<"输入边:"<<endl;
    if(E!=0){
        Etemp=(Edge)malloc(sizeof(ENode));
        for(i=0;i<E;i++){
            cin>>Etemp->V1>>Etemp->V2;
            Insert(Graph,Etemp);
        }
    }
    return Graph;
}
MGraph CreateGraph(int N){
    MGraph Graph;
    Vertex V,W;
    Graph=(MGraph)malloc(sizeof(GNode));
    Graph->Nv=N;
    Graph->Ne=0;
    for(V=0;V<N;V++)
        for(W=0;W<N;W++)
            Graph->G[V][W]=0;
    return Graph;
}
void Insert(MGraph Graph,Edge Etemp){
    Graph->G[Etemp->V1][Etemp->V2]=1;
    Graph->G[Etemp->V2][Etemp->V1]=1;
}
void ListComponentsWithDFS(MGraph Graph){
    Vertex V;
    for(V=0;V<Graph->Nv;V++){
        if(!Visited[V]){
            cout<<"{";
            DFS(V,Graph);
            cout<<"}"<<endl;
        }
    }
}
void DFS(Vertex V,MGraph Graph){
    Visited[V]=true;
    cout<<" "<<V<<" ";
    for(Vertex W=0;W<Graph->Nv;W++){
        if(!Visited[W] && Graph->G[V][W]!=0)
            DFS(W,Graph);
    }
}
void InitVisit(){
    for (int i = 0; i < MaxVertexNum; i++)
        Visited[i] = false;
}

void ListComponentsWithBFS(MGraph Graph){
    Vertex V;
    for(V=0;V<Graph->Nv;V++){
        if(!Visited[V]){
            cout<<"{";
            BFS(V,Graph);
            cout<<"}"<<endl;
        }
    }
}
void BFS(Vertex V,MGraph Graph){
    queue<Vertex> q;
    Vertex W;
    q.push(V);
    Visited[V]=true;
    while(!q.empty()){
        V=q.front();
        q.pop();
        cout<<" "<<V<<" ";
        for(W=0;W<Graph->Nv;W++){
            if(!Visited[W] && Graph->G[V][W]!=0){
                q.push(W);
                Visited[W]=true;
            }
        }
    }
}
