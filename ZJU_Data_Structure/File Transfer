//  并查集的相关操作，Find 和 Union 的实现，注意按照树的高度进行合并，不然有的测试用例无法通过。
//  main.cpp
//  DataStructure
//
//  Created by Ruoan on 2018/7/20.
//  Copyright © 2018年 Ruoan. All rights reserved.
//
#include <iostream>
using namespace std;
#define Maxsize 10000
typedef int ElementType;
typedef int Setname;/*默认用根结点的下标作为集合名称*/
typedef ElementType SetType[Maxsize];

void Initiallization(SetType S,int n);
void Input_connection(SetType S);
void Check_connection(SetType S);
void Check_network(SetType S,int n);
Setname Find(SetType S,ElementType u);
void Union(SetType S,Setname root1,Setname root2);

Setname Find(SetType S,ElementType X){
    while(S[X]>=0)
        X=S[X];
    return X;
}
void Union(SetType S,Setname root1,Setname root2){
    if(S[root2]<S[root1])
        S[root1]=root2;
    else{
        if(S[root1] == S[root2])
            S[root1]--;
        S[root2]=root1;
    }
}
void Initiallization(SetType S,int n){
    int i;
    for(i=0;i<n;i++)
        S[i]=-1;
}
void Input_connection(SetType S){
    ElementType u,v;
    Setname root1,root2;
    cin>>u>>v;
    root1=Find(S,u-1);
    root2=Find(S,v-1);
    if(root1!=root2)
        Union(S,root1,root2);
}
void Check_connection(SetType S){
    ElementType u,v;
    Setname root1,root2;
    cin>>u>>v;
    root1=Find(S,u-1);
    root2=Find(S,v-1);
    if(root1 == root2)
        cout<<"yes"<<endl;
    else
        cout<<"no"<<endl;
}
void Check_network(SetType S,int n){
    int i,count=0;
    for(i=0;i<n;i++)
        if(S[i]<0)
            count++;
    if(count==1)
        cout<<"The network is connected."<<endl;
    else
        cout<<"There are "<<count<<" components."<<endl;
}
int main(int argc, const char * argv[]){
    SetType S;
    int n;
    char flag;
    cin>>n;
    Initiallization(S,n);
    do{
        cin>>flag;
        switch(flag){
            case 'I':Input_connection(S);break;
            case 'C':Check_connection(S);break;
            case 'S':Check_network(S,n);break;
        }
    }while(flag != 'S');
    return 0;
}
