#include<iostream>
#define MaxTree 10
#define Null -1
typedef int Tree;
typedef char ElementType;
using namespace std;
struct TNode{
    ElementType data;
    Tree left;
    Tree right;
}T1[MaxTree],T2[MaxTree];
Tree BuildTree(TNode T[]);
bool Isomorphic(Tree R1,Tree R2);


Tree BuildTree(TNode T[]){
    int N,i;
    ElementType TreeLeft,TreeRight;
    Tree TreeRoot=Null;
    cin>>N;//树的节点个数
    
    if(N){
        int *FindTreeRoot=new int[N]();
        for(i=0;i<N;i++){
            cin>>T[i].data>>TreeLeft>>TreeRight;
            if(TreeLeft!='-'){
                T[i].left=TreeLeft-'0';
                FindTreeRoot[T[i].left]=1;
            }
            else
                T[i].left=Null;
            if(TreeRight!='-'){
                T[i].right=TreeRight-'0';
                FindTreeRoot[T[i].right]=1;
            }
            else
                T[i].right=Null;
        }
        for(i=0;i<N;i++){
            if(FindTreeRoot[i]==0)
                TreeRoot=i;
        }
        delete [] FindTreeRoot;
    }
    else
        return Null;
    return TreeRoot;
}
bool Isomorphic(Tree R1,Tree R2){
    if(R1==Null&&R2==Null)
        return true;
    if((R1==Null&&R2!=Null)||(R1!=Null&&R2==Null))
        return false;
    if(T1[R1].data!=T2[R2].data)
        return false;
    if(T1[R1].left==Null&&T2[R2].left==Null)
        return Isomorphic(T1[R1].right,T2[R2].right);
    if((T1[R1].left!=Null && T2[R2].left!=Null) && (T1[T1[R1].left].data==T2[T2[R2].left].data))
        return Isomorphic(T1[R1].right,T2[R2].right) && Isomorphic(T1[R1].left,T2[R2].left);
    else
        return Isomorphic(T1[R1].left,T2[R2].right) && Isomorphic(T1[R1].right,T2[R2].left);
}
int main(){
    Tree R1,R2;     //首先建立两棵树，R1，R2为树的根节点
    R1=BuildTree(T1);//输入结构数组表示的静态二叉树，输出树的下标节点
    R2=BuildTree(T2);
    if(Isomorphic(R1,R2))   //Isomorphic函数判断是否同构
        printf("Yes\n");
    else
        printf("No\n");
    return 0;
}

