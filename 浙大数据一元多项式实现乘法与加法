#include <cstdio>
#include <iostream>
#include <cstring>
using namespace std;
struct PolyNode{
    int coef;
    int expon;
    struct PolyNode*next;
};
typedef struct PolyNode *Polynomial;
//定义Polynomial为指向PolyNode的指针，以后就可以用Polynomial来定义新指针啦

Polynomial ReadPoly();//读入一元二次多项式
void Attach(int c, int e,Polynomial *rear);//将新读入的两个元素接在原链表后面
Polynomial Mult(Polynomial P1, Polynomial P2 );//计算一元二次多项式的乘积
Polynomial Add(Polynomial P1, Polynomial P2 );//计算一元二次多项式的乘积的相加
void PrintPoly(Polynomial P);//打印一元二次多项式

int main(){
    Polynomial P1,P2,PP,PS;
    
    P1 = ReadPoly();
    P2 = ReadPoly();
    PP = Mult( P1, P2 );
    PrintPoly( PP );
    PS = Add( P1, P2 );
    PrintPoly( PS );
    return 0;
}
Polynomial ReadPoly(){
    int n=0;
    int c=0,e=0;
    Polynomial p=nullptr;
    Polynomial rear=nullptr;
    Polynomial t=nullptr;
    p=(Polynomial)malloc(sizeof(PolyNode));
    p->next=nullptr;
    rear=p;
    cout<<"输入一元多项式的项数目："<<endl;
    cin>>n;
    for(int i=1;i<=n;i++){
        cout<<"输入第"<<i<<"个系数和指数，用空格隔开"<<endl;
        cin>>c>>e;
        Attach(c, e, &rear);
    }
    t=p;
    p=t->next;
    free(t);
    return p;
}
void Attach(int c, int e,Polynomial *rear){
    Polynomial temp=nullptr;
    temp=(Polynomial)malloc(sizeof(PolyNode));
    temp->coef=c;
    temp->expon=e;
    temp->next=nullptr;
    (*rear)->next=temp;
    *rear=temp;
}
Polynomial Add(Polynomial P1, Polynomial P2 ){
//这一过程与合并两个有序链表非常相似
    Polynomial rear = nullptr;
    Polynomial front = nullptr;
    Polynomial temp = nullptr;
    int sum=0;
    rear=(Polynomial)malloc(sizeof(PolyNode));
    rear->next=nullptr;
    front=rear;
    while(P1&&P2){
        if(P1->expon>P2->expon){
            Attach(P1->coef,P1->expon,&rear);
            P1=P1->next;
        }
        else if(P1->expon<P2->expon){
            Attach(P2->coef,P2->expon,&rear);
            P2=P2->next;
        }
        else{
            sum=P1->coef+P2->coef;
            if(sum!=0)
                Attach(sum,P2->expon,&rear);
            P1=P1->next;
            P2=P2->next;
        }
    }
    if(P1==nullptr)
        rear->next=P2;
    if(P2==nullptr)
        rear->next=P1;
    temp=front;
    front=temp->next;
    free(temp);
    return front;
}
//给定输入的链表，输出的是 “系数指数空格 系数指数空格...系数指数“,最后一项没有空格
//也可以反过来理解，输出的是“系数指数 空格系数指数 空格系数指数...系数指数”，第一项没有空格
void PrintPoly(Polynomial P){
    int flag=0;
    if(!P){
        cout<<"0 0"<<endl;
        return;
    }
    while(P){
        if(flag==0)
            flag=1;
        else
            cout<<" ";
        cout<<P->coef<<" "<<P->expon;
        P=P->next;
    }
    cout<<endl;
}
Polynomial Mult(Polynomial P1, Polynomial P2 ){
    if(!P1||!P2)
        return nullptr;
    int c,e;
    Polynomial p=nullptr;
    Polynomial temp=nullptr;
    Polynomial rear=nullptr;
    Polynomial T1,T2;
    p=(Polynomial)malloc(sizeof(PolyNode));
    p->next=nullptr;
    rear=p;
    T1=P1;
    T2=P2;
    while(T2){
        Attach(T1->coef*T2->coef,T1->expon+T2->expon,&rear);
        T2=T2->next;
    }
    T1=T1->next;
    while(T1){
        T2=P2;
        rear=p;
        while(T2){
            e=T1->expon+T2->expon;
            c=T1->coef*T2->coef;
            while(rear->next && rear->next->expon>e)
                rear=rear->next;
            if(rear->next && rear->next->expon == e){
                if(rear->next->coef+c==0){
                    temp=rear->next;
                    rear=rear->next;
                    free(temp);
                }
                else
                    rear->next->coef+=c;
            }
            else{
                temp=(Polynomial)malloc(sizeof(PolyNode));
                temp->coef=c;
                temp->expon=e;
                temp->next=rear->next;
                rear->next=temp;
                rear=temp;
            }
            T2=T2->next;
        }
        T1=T1->next;
    }
    temp=p;
    p=p->next;
    free(temp);
    return p;
}
