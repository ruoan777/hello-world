#include <cstdio>
#include <vector>
#include <iostream>
using namespace std;

int GetNumberOfK(vector<int> data ,int k);
int getFirstK(vector<int> data,int k,int left,int right);
int getLastK(vector<int> data,int k,int left,int right);

bool emptyVector=false;
int GetNumberOfK(vector<int> data ,int k) {
    int number=0;
    int len=data.size();
    if(data.empty()){
        emptyVector=true;
        return 0;
    }
    int first=getFirstK(data,k,0,len-1);
    int last=getLastK(data,k,0,len-1);
    if(first>-1 && last>-1)
        number=last-first+1;
    return number;
}
int getFirstK(vector<int> data,int k,int left,int right){
    if(left>right)
        return -1;
    int middle=(left+right)/2;
    if(data[middle]==k){
        if((middle>left && data[middle-1]!=k)||middle==left)
            return middle;
        else
            right=middle-1;
    }
    else if(data[middle]<k)
        left=middle+1;
    else
        right=middle-1;
    return getFirstK(data,k,left,right);
}
int getLastK(vector<int> data,int k,int left,int right){
    if(left>right)
        return -1;
    int middle=(left+right)/2;
    if(data[middle]==k){
        if((middle<right && data[middle+1]!=k)||middle==right)
            return middle;
        else
            left=middle+1;
    }
    else if(data[middle]<k)
        left=middle+1;
    else
        right=middle-1;
    return getLastK(data,k,left,right);
}
void Test(const char* testName, vector<int> data, int length, int k, int expected)
{
    if(testName != nullptr)
        printf("%s begins: ", testName);
    
    int result = GetNumberOfK(data,k);
    if(result == expected)
        printf("Passed.\n");
    else
        printf("Failed.\n");
}
void Test1()
{
    int n[] = {1, 2, 3, 3, 3, 3, 4, 5};
    vector<int> data(n, n+8);
    Test("Test1", data, sizeof(data) / sizeof(int), 3, 4);
}
void Test2()
{
    int n[] = {};
    vector<int> data(n, n+8);
    Test("Test1", data, sizeof(data) / sizeof(int), 3, 0);
    if(emptyVector==true)
        cout<<"emptyVector=true"<<endl;
}

int main(int argc, char* argv[])
{
    Test1();
    Test2();
    return 0;
}
