剑指offer 调整数组顺序使奇数位于偶数前面。(书上解法)
注：此段代码无法保证原来奇数与奇数，偶数与偶数之间的相对位置不变
class Solution {
public:
    void reOrderArray(vector<int> &array) {
        int length=array.size();
        if (array.empty())
            return;
        int pleft=0;
        int pright=length-1;
        while(pleft<pright)
        {
            while(pleft<pright&&(array[pleft]&0x1)!=0)//用位与运算判断一个数是否为偶数，!=0表示为奇数
                pleft++;
            while(pleft<pright&&(array[pright]&0x1)==0)
                pright--;
            if(pleft<pright)
            {
                int temp=array[pleft];
                array[pleft]=array[pright];
                array[pright]=temp;
            }
        }
    }
};

同样解决上面的问题，不过接下来这段代码可以保证原来奇数与奇数，偶数与偶数之间的相对位置不变
/*
时间复杂度为O（n），空间复杂度为O（n）的算法
整体思路：
首先统计奇数的个数
然后新建一个等长数组，设置两个指针，奇数指针从0开始，偶数指针从奇数个数的末尾开始 遍历，填数
*/
class Solution {
public:
    void reOrderArray(vector<int> &array) {
        if(array.size()==0||array.size()==1) 
            return;
        int oddCount=0,oddBegin=0;
        int* newArray=new int[array.size()];
        for(int i=0;i<array.size();i++)
        {
            if((array[i]&1)==1) 
                oddCount++;
        }
        for(int i=0;i<array.size();i++)
        {
            if((array[i]&1)==1) 
                newArray[oddBegin++]=array[i];
            else 
                newArray[oddCount++]=array[i];
        }
        for(int i=0;i<array.size();i++){
            array[i]=newArray[i];
        }       
    }
};
